ac.ind.tmp=sample.ac(ac.ind=ac.ind,dat=dat,theta=theta,n.ac=n.ac,n.grid=n.grid,phi=phi,
dist.mat=dist.mat,n.tsegm=n.tsegm,n.possib.ac=n.possib.ac),
phi.tmp=sample.phi(ac.ind=ac.ind,dist.mat=dist.mat,n.grid=n.grid, n.ac=n.ac,phi=phi,jump=jump1$phi,
dat=dat,n.tsegm=n.tsegm,theta=theta),
z=sample.z(ac.ind=ac.ind,dist.mat=dist.mat,n.grid=n.grid,n.ac=n.ac,n.tsegm=n.tsegm,
dat=dat,phi=phi,log.theta=log(theta)),
v=sample.v(z=z,n.ac=n.ac,gamma1=gamma1),
logl=get.loglikel(z=z,dist.mat=dist.mat,phi=phi,dat=dat,ac.ind=ac.ind,n.grid=n.grid)
)
ac.ind.new=ac.ind.old
ind=sample(1:n.possib.ac,size=1)
ac.ind.new[i]=ind
#get marginal loglikel
tmp.old=get.calc.mloglik(dist.mat.sel=dist.mat[ac.ind.old,],phi=phi,dat=dat,
n.tsegm=n.tsegm,n.ac=n.ac,n.grid=n.grid,log.theta=log(theta))
tmp.new=get.calc.mloglik(dist.mat.sel=dist.mat[ac.ind.new,],phi=phi,dat=dat,
n.tsegm=n.tsegm,n.ac=n.ac,n.grid=n.grid,log.theta=log(theta))
# max1=-apply(cbind(tmp.old,tmp.new),1,max)
max1=-GetMaxRows(mat=cbind(tmp.old,tmp.new))
ac.ind.orig=ac.ind.old=ac.ind
ac.ind.new=ac.ind.old
ind=sample(1:n.possib.ac,size=1)
ac.ind.new[i]=ind
#get marginal loglikel
tmp.old=get.calc.mloglik(dist.mat.sel=dist.mat[ac.ind.old,],phi=phi,dat=dat,
n.tsegm=n.tsegm,n.ac=n.ac,n.grid=n.grid,log.theta=log(theta))
tmp.new=get.calc.mloglik(dist.mat.sel=dist.mat[ac.ind.new,],phi=phi,dat=dat,
n.tsegm=n.tsegm,n.ac=n.ac,n.grid=n.grid,log.theta=log(theta))
# max1=-apply(cbind(tmp.old,tmp.new),1,max)
max1=-GetMaxRows(mat=cbind(tmp.old,tmp.new))
tmp.old1=tmp.old+max1
apply(tmp,1,max)
apply(tmp.old1,1,max)
tmp.new1=tmp.new+max1
pold=sum(log(rowSums(exp(tmp.old1))))
pnew=sum(log(rowSums(exp(tmp.new1))))
old=phi
new=abs(rnorm(1,mean=old,sd=jump)) #reflection proposal around zero
#get marginal loglikel
distma1=dist.mat[ac.ind,]
log.theta=log(theta)
tmp.old=get.calc.mloglik(dist.mat.sel=dist.mat1,phi=old,dat=dat,
n.tsegm=n.tsegm,n.ac=n.ac,n.grid=n.grid,log.theta=log.theta)
tmp.new=get.calc.mloglik(dist.mat.sel=dist.mat1,phi=new,dat=dat,
n.tsegm=n.tsegm,n.ac=n.ac,n.grid=n.grid,log.theta=log.theta)
max1=GetMaxRows(mat=cbind(tmp.old,tmp.new))
jump=1
old=phi
new=abs(rnorm(1,mean=old,sd=jump)) #reflection proposal around zero
#get marginal loglikel
distma1=dist.mat[ac.ind,]
log.theta=log(theta)
tmp.old=get.calc.mloglik(dist.mat.sel=dist.mat1,phi=old,dat=dat,
n.tsegm=n.tsegm,n.ac=n.ac,n.grid=n.grid,log.theta=log.theta)
tmp.new=get.calc.mloglik(dist.mat.sel=dist.mat1,phi=new,dat=dat,
n.tsegm=n.tsegm,n.ac=n.ac,n.grid=n.grid,log.theta=log.theta)
max1=GetMaxRows(mat=cbind(tmp.old,tmp.new))
tmp.old1=tmp.old-max1
distmat1=dist.mat[ac.ind,]
log.theta=log(theta)
tmp.old=get.calc.mloglik(dist.mat.sel=dist.mat1,phi=old,dat=dat,
n.tsegm=n.tsegm,n.ac=n.ac,n.grid=n.grid,log.theta=log.theta)
tmp.new=get.calc.mloglik(dist.mat.sel=dist.mat1,phi=new,dat=dat,
n.tsegm=n.tsegm,n.ac=n.ac,n.grid=n.grid,log.theta=log.theta)
old=phi
new=abs(rnorm(1,mean=old,sd=jump)) #reflection proposal around zero
#get marginal loglikel
dist.mat1=dist.mat[ac.ind,]
log.theta=log(theta)
tmp.old=get.calc.mloglik(dist.mat.sel=dist.mat1,phi=old,dat=dat,
n.tsegm=n.tsegm,n.ac=n.ac,n.grid=n.grid,log.theta=log.theta)
tmp.new=get.calc.mloglik(dist.mat.sel=dist.mat1,phi=new,dat=dat,
n.tsegm=n.tsegm,n.ac=n.ac,n.grid=n.grid,log.theta=log.theta)
max1=GetMaxRows(mat=cbind(tmp.old,tmp.new))
tmp.old1=tmp.old-max1
apply(tmp.old1,1,max)
rm(list=ls(all=TRUE))
set.seed(10)
#read important functions
setwd('U:\\GIT_models\\activcenter_subset_locations')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
#get data
dat=read.csv('fake data.csv',as.is=T) #frequency of visitation in each location (column) for each time segment (row)
grid.coord=read.csv('fake data grid.csv',as.is=T) #geographical coordinates of locations
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=20
gamma1=0.1
#initial coordinates of activity centers (define this based on data instead of uninformative as below)
ind=sample(nrow(grid.coord),size=n.ac)
ac.coord.init=grid.coord[ind,]
#potential locations for activity centers (AC)
possib.ac=grid.coord #these don't have to be identical (i.e., we can define AC's on a coarser grid)
#run gibbs sampler
options(warn=2)
dat=data.matrix(dat)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1,
possib.ac=possib.ac)
#basic setup
n.tsegm=nrow(dat)
n.grid=nrow(grid.coord)
grid.coord=data.matrix(grid.coord)
n.possib.ac=nrow(possib.ac)
#initial values
ac.ind=sample(n.grid,size=n.ac)
z=sample(1:n.ac,size=n.tsegm,replace=T) #cluster membership
phi=0.0001 #distance decay parameter
theta=rep(1/n.ac,n.ac)
#matrices to store results
store.coord=matrix(NA,ngibbs,n.ac*2)
store.z=matrix(NA,ngibbs,n.tsegm)
store.param=matrix(NA,ngibbs,1) #to store phi
store.logl=matrix(NA,ngibbs,1)
store.theta=matrix(NA,ngibbs,n.ac)
#MH stuff
adaptMH=50
jump1=list(phi=0.2,ac.ind=rep(1,n.ac))
accept1=list(phi=0,ac.ind=rep(0,n.ac))
#pre-calculate distances between each potential AC location (possib.ac) and each actual location in our data (grid.coord)
dist.mat=GetDistance(AcCoord=data.matrix(possib.ac),GridCoord=data.matrix(grid.coord),
Ngrid=nrow(grid.coord), Nac=nrow(possib.ac))
#gibbs sampler
for (i in 1:ngibbs){
print(i)
#sample AC
tmp=sample.ac(ac.ind=ac.ind,dat=dat,theta=theta,n.ac=n.ac,n.grid=n.grid,phi=phi,
dist.mat=dist.mat,n.tsegm=n.tsegm,n.possib.ac=n.possib.ac)
ac.ind=tmp$ac.ind
accept1$ac.ind=accept1$ac.ind+tmp$accept
# ac.coord=ac.coord.true
#sample phi
tmp=sample.phi(ac.ind=ac.ind,dist.mat=dist.mat,n.grid=n.grid,
n.ac=n.ac,phi=phi,jump=jump1$phi,dat=dat,n.tsegm=n.tsegm,theta=theta)
phi=tmp$phi
accept1$phi=accept1$phi+tmp$accept
# phi=phi.true
#sample z
z=sample.z(ac.ind=ac.ind,dist.mat=dist.mat,n.grid=n.grid,n.ac=n.ac,n.tsegm=n.tsegm,
dat=dat,phi=phi,log.theta=log(theta))
# z=z.true
#sample theta
v=sample.v(z=z,n.ac=n.ac,gamma1=gamma1)
# theta=rep(NA,n.ac)
# theta[1]=v[1]
# tmp=(1-v[1])
# for (j in 2:n.ac){
#   theta[j]=v[j]*tmp
#   tmp=tmp*(1-v[j])
# }
theta=GetTheta(v=v,nac=n.ac)
#get loglikel
logl=get.loglikel(z=z,dist.mat=dist.mat,phi=phi,dat=dat,ac.ind=ac.ind,n.grid=n.grid)
if (i<nburn & i%%adaptMH==0){
#adapt MH
tmp=print.adapt(accept1z=accept1,jump1z=jump1,accept.output=adaptMH)
jump1=tmp$jump1
accept1=tmp$accept1
#re-order data from time to time according to theta (largest to smallest)
ordem=order(theta,decreasing=T)
znew=rep(NA,n.tsegm)
ac.ind=ac.ind[ordem]
for (j in 1:n.ac){
cond=z==ordem[j]
if (sum(cond)>0) znew[cond]=j
}
z=znew
theta=theta[ordem]
}
#store results
store.coord[i,]=unlist(grid.coord[ac.ind,])
store.z[i,]=z
store.param[i,]=phi
store.logl[i,]=logl
store.theta[i,]=theta
}
library(microbenchmark)
microbenchmark(
ac.ind.tmp=sample.ac(ac.ind=ac.ind,dat=dat,theta=theta,n.ac=n.ac,n.grid=n.grid,phi=phi,
dist.mat=dist.mat,n.tsegm=n.tsegm,n.possib.ac=n.possib.ac),
phi.tmp=sample.phi(ac.ind=ac.ind,dist.mat=dist.mat,n.grid=n.grid, n.ac=n.ac,phi=phi,jump=jump1$phi,
dat=dat,n.tsegm=n.tsegm,theta=theta),
z=sample.z(ac.ind=ac.ind,dist.mat=dist.mat,n.grid=n.grid,n.ac=n.ac,n.tsegm=n.tsegm,
dat=dat,phi=phi,log.theta=log(theta)),
v=sample.v(z=z,n.ac=n.ac,gamma1=gamma1),
logl=get.loglikel(z=z,dist.mat=dist.mat,phi=phi,dat=dat,ac.ind=ac.ind,n.grid=n.grid)
)
rm(list=ls(all=TRUE))
set.seed(10)
#read important functions
setwd('U:\\GIT_models\\activcenter_subset_locations')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
#get data
dat=read.csv('fake data.csv',as.is=T) #frequency of visitation in each location (column) for each time segment (row)
grid.coord=read.csv('fake data grid.csv',as.is=T) #geographical coordinates of locations
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=20
gamma1=0.1
#initial coordinates of activity centers (define this based on data instead of uninformative as below)
ind=sample(nrow(grid.coord),size=n.ac)
ac.coord.init=grid.coord[ind,]
#potential locations for activity centers (AC)
possib.ac=grid.coord #these don't have to be identical (i.e., we can define AC's on a coarser grid)
#run gibbs sampler
options(warn=2)
dat=data.matrix(dat)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1,
possib.ac=possib.ac)
set.seed(9)
#basic setup
n.tsegm=400
n.ac=10
n.grid=100
n=floor(runif(n.tsegm,min=0,max=900))
#spatial coordinates
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
ind=sample(nrow(grid.coord),size=n.ac)
ac.coord.true=ac.coord=grid.coord[ind,]
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
#cluster membership
z.true=z=sample(1:n.ac,size=n.tsegm,replace=T)
#distance decay parameter
phi.true=phi=0.1
#generate data
y=matrix(NA,n.tsegm,n.grid)
for (i in 1:n.tsegm){
#calculate distance
x2=(grid.coord$x-ac.coord$x[z[i]])^2
y2=(grid.coord$y-ac.coord$y[z[i]])^2
d=sqrt(x2+y2)
#calculate probability
tmp=exp(-phi*d)
prob=tmp/sum(tmp)
#draw results
y[i,]=rmultinom(1,size=n[i],prob=prob)
}
image(y[z==1,])
plot(res$logl,type='l')
plot(res$theta[ngibbs,],type='h')
plot(res$phi,type='l')
abline(h=phi.true,col='red')
k=data.frame(estim=res$z[ngibbs,],true1=z.true)
z=table(k);z
ordem=numeric()
for (i in 1:ncol(z)){
ind=which(z[,i]==max(z[,i]))
ordem=c(ordem,ind)
}
table(k)[ordem,]
n.ac=20
ac.coord=matrix(res$coord[ngibbs-1,],n.ac,2)
ac.coord[ordem,]
ac.coord.true
rango=range(c(ac.coord.true),ac.coord[ordem,])
plot(ac.coord.true$x,ac.coord[ordem,1],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
k=data.frame(estim=res$z[ngibbs,],true1=z.true)
z=table(k);z
ordem=numeric()
for (i in 1:ncol(z)){
ind=which(z[,i]==max(z[,i]))
ordem=c(ordem,ind)
}
table(k)[ordem,]
rm(list=ls(all=TRUE))
set.seed(9)
#basic setup
n.tsegm=400
n.ac=10
n.grid=100
n=floor(runif(n.tsegm,min=0,max=900))
#spatial coordinates
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
ind=sample(nrow(grid.coord),size=n.ac)
ac.coord.true=ac.coord=grid.coord[ind,]
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
#cluster membership
z.true=z=sample(1:n.ac,size=n.tsegm,replace=T)
#distance decay parameter
phi.true=phi=0.1
#generate data
y=matrix(NA,n.tsegm,n.grid)
for (i in 1:n.tsegm){
#calculate distance
x2=(grid.coord$x-ac.coord$x[z[i]])^2
y2=(grid.coord$y-ac.coord$y[z[i]])^2
d=sqrt(x2+y2)
#calculate probability
tmp=exp(-phi*d)
prob=tmp/sum(tmp)
#draw results
y[i,]=rmultinom(1,size=n[i],prob=prob)
}
image(y[z==1,])
setwd('U:\\GIT_models\\activcenter_subset_locations')
write.csv(y,'fake data.csv',row.names=F)
write.csv(grid.coord,'fake data grid.csv',row.names=F)
rm(list=ls(all=TRUE))
set.seed(10)
#read important functions
setwd('U:\\GIT_models\\activcenter_subset_locations')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
#get data
dat=read.csv('fake data.csv',as.is=T) #frequency of visitation in each location (column) for each time segment (row)
grid.coord=read.csv('fake data grid.csv',as.is=T) #geographical coordinates of locations
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=20
gamma1=0.1
#initial coordinates of activity centers (define this based on data instead of uninformative as below)
ind=sample(nrow(grid.coord),size=n.ac)
ac.coord.init=grid.coord[ind,]
#potential locations for activity centers (AC)
possib.ac=grid.coord #these don't have to be identical (i.e., we can define AC's on a coarser grid)
#run gibbs sampler
options(warn=2)
dat=data.matrix(dat)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1,
possib.ac=possib.ac)
rm(list=ls(all=TRUE))
set.seed(9)
#basic setup
n.tsegm=400
n.ac=10
n.grid=100
n=floor(runif(n.tsegm,min=0,max=900))
#spatial coordinates
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
ind=sample(nrow(grid.coord),size=n.ac)
ac.coord.true=ac.coord=grid.coord[ind,]
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
#cluster membership
z.true=z=sample(1:n.ac,size=n.tsegm,replace=T)
#distance decay parameter
phi.true=phi=0.1
#generate data
y=matrix(NA,n.tsegm,n.grid)
for (i in 1:n.tsegm){
#calculate distance
x2=(grid.coord$x-ac.coord$x[z[i]])^2
y2=(grid.coord$y-ac.coord$y[z[i]])^2
d=sqrt(x2+y2)
#calculate probability
tmp=exp(-phi*d)
prob=tmp/sum(tmp)
#draw results
y[i,]=rmultinom(1,size=n[i],prob=prob)
}
image(y[z==1,])
setwd('U:\\GIT_models\\activcenter_subset_locations')
write.csv(y,'fake data.csv',row.names=F)
write.csv(grid.coord,'fake data grid.csv',row.names=F)
set.seed(10)
#read important functions
setwd('U:\\GIT_models\\activcenter_subset_locations')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
#get data
dat=read.csv('fake data.csv',as.is=T) #frequency of visitation in each location (column) for each time segment (row)
grid.coord=read.csv('fake data grid.csv',as.is=T) #geographical coordinates of locations
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=20
gamma1=0.1
#initial coordinates of activity centers (define this based on data instead of uninformative as below)
ind=sample(nrow(grid.coord),size=n.ac)
ac.coord.init=grid.coord[ind,]
#potential locations for activity centers (AC)
possib.ac=grid.coord #these don't have to be identical (i.e., we can define AC's on a coarser grid)
#run gibbs sampler
options(warn=2)
dat=data.matrix(dat)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1,
possib.ac=possib.ac)
plot(res$logl,type='l')
plot(res$theta[ngibbs,],type='h')
plot(res$phi,type='l')
abline(h=phi.true,col='red')
k=data.frame(estim=res$z[ngibbs,],true1=z.true)
z=table(k);z
ordem=numeric()
for (i in 1:ncol(z)){
ind=which(z[,i]==max(z[,i]))
ordem=c(ordem,ind)
}
table(k)[ordem,]
n.ac=20
ac.coord=matrix(res$coord[ngibbs-1,],n.ac,2)
ac.coord[ordem,]
ac.coord.true
rango=range(c(ac.coord.true),ac.coord[ordem,])
plot(ac.coord.true$x,ac.coord[ordem,1],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
plot(ac.coord.true$y,ac.coord[ordem,2],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
plot(res$phi,type='l')
abline(h=phi.true,col='red')
rm(list=ls(all=TRUE))
set.seed(13)
#basic setup
n.tsegm=400
n.ac=5
n.grid=100
n=floor(runif(n.tsegm,min=0,max=900))
#spatial coordinates
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
ind=sample(nrow(grid.coord),size=n.ac)
ac.coord.true=ac.coord=grid.coord[ind,]
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
#cluster membership
z.true=z=sample(1:n.ac,size=n.tsegm,replace=T)
#distance decay parameter
phi.true=phi=0.1
#generate data
y=matrix(NA,n.tsegm,n.grid)
for (i in 1:n.tsegm){
#calculate distance
x2=(grid.coord$x-ac.coord$x[z[i]])^2
y2=(grid.coord$y-ac.coord$y[z[i]])^2
d=sqrt(x2+y2)
#calculate probability
tmp=exp(-phi*d)
prob=tmp/sum(tmp)
#draw results
y[i,]=rmultinom(1,size=n[i],prob=prob)
}
image(y[z==1,])
setwd('U:\\GIT_models\\activcenter_subset_locations')
write.csv(y,'fake data.csv',row.names=F)
write.csv(grid.coord,'fake data grid.csv',row.names=F)
set.seed(10)
#read important functions
setwd('U:\\GIT_models\\activcenter_subset_locations')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
#get data
dat=read.csv('fake data.csv',as.is=T) #frequency of visitation in each location (column) for each time segment (row)
grid.coord=read.csv('fake data grid.csv',as.is=T) #geographical coordinates of locations
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=20
gamma1=0.1
#initial coordinates of activity centers (define this based on data instead of uninformative as below)
ind=sample(nrow(grid.coord),size=n.ac)
ac.coord.init=grid.coord[ind,]
#potential locations for activity centers (AC)
possib.ac=grid.coord #these don't have to be identical (i.e., we can define AC's on a coarser grid)
#run gibbs sampler
options(warn=2)
dat=data.matrix(dat)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1,
possib.ac=possib.ac)
plot(res$logl,type='l')
plot(res$theta[ngibbs,],type='h')
plot(res$phi,type='l')
abline(h=phi.true,col='red')
k=data.frame(estim=res$z[ngibbs,],true1=z.true)
z=table(k);z
ordem=numeric()
for (i in 1:ncol(z)){
ind=which(z[,i]==max(z[,i]))
ordem=c(ordem,ind)
}
table(k)[ordem,]
n.ac=20
ac.coord=matrix(res$coord[ngibbs-1,],n.ac,2)
ac.coord[ordem,]
ac.coord.true
rango=range(c(ac.coord.true),ac.coord[ordem,])
plot(ac.coord.true$x,ac.coord[ordem,1],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
plot(ac.coord.true$y,ac.coord[ordem,2],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
